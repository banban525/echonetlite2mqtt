<div class="container">
  <div class="row">
    <h2>Devices</h2>
    <table id="deviceListTable" class="table table-striped" style="min-height:400px">
      <thead>
        <tr>
          <th scope="col">name</th>
          <th scope="col">type</th>
          <th scope="col">ip</th>
        </tr>
      </thead>
      <tbody>
      </tbody>
    </table>
  </div>
</div>
<script type="text/javascript">


  $(function() {
    $("#rootmenu-devices").addClass("active");

    function updateSystem()
    {
      $.ajax({
          type: "GET",
          url: "<%= root %>/api/status",
          dataType : "json"
        }).done((data)=>{

          $("#mqtt-state").val(data.mqttState);
          $("#footer-version").text(data.systemVersion)

          for(const device of data.devices)
          {
            if($(`#device-${device.id}`).length === 0)
            {
              $("#deviceListTable tbody").append(`<tr id="device-${device.id}"><th><a href="devices/${device.name}">${device.name}</a></th><td>${device.deviceType}</td><td>${device.ip}</td></tr>`);
            }
          }
      });
    }
    updateSystem();


    // WebSocketによるサーバー側Pushイベントの受信
    let reconnectAttempts = 0;
    const maxReconnectDelay = 30000;

    function connectWebSocket(){
      const url = new URL(window.location.href);
      url.protocol = url.protocol === "https:" ? "wss:" : "ws:";
      url.pathname = "/";

      try
      {
        const ws = new WebSocket(url.href);

        ws.onopen = () => {
          console.log(`Connected to server ${url.href}`);
          reconnectAttempts = 0;
        }
        ws.onmessage = (event) => {
          const obj = JSON.parse(event.data);
          if(obj.event === "systemUpdated")
          {
            updateSystem();
          }
        }
        ws.onclose = () => {
          console.log("Disconnected from server");
          scheduleReconnect();
        }
        ws.onerror = (error) => {
          console.error("Error WebSocket:", error);
          ws?.close();
        };
      }
      catch(e)
      {
        console.error("Error WebSocket:", e);
        scheduleReconnect();
      }
    }
    function scheduleReconnect() {
      const delay = Math.min(1000 * (2 ** reconnectAttempts), maxReconnectDelay);
      console.warn(`try reconnect after ${delay / 1000} sec...`);
      setTimeout(connectWebSocket, delay);
      reconnectAttempts++;
    }

    connectWebSocket();
  });
    


</script>