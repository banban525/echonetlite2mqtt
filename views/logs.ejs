<div class="container">
    <div class="row">
      <h2>Logs</h2>
      <table id="logsTable" class="table table-striped">
        <thead>
          <tr>
            <th scope="col">id</th>
            <th scope="col" style="width:12em">Date & Time</th>
            <th scope="col">Message</th>
          </tr>
        </thead>
        <tbody>
        </tbody>
      </table>
      <a href="/downloadlogs/zip">Download Logs and internal statues for debug.</a>
    </div>
  </div>
  <script type="text/javascript">


    $(function() {

      $("#rootmenu-logs").addClass("active");

      function updateSystem()
      {
        $.ajax({
            type: "GET",
            url: "/api/status",
            dataType : "json"
          }).done((data)=>{
            $("#footer-version").text(data.systemVersion)
            $("#mqtt-state").val(data.mqttState);
        });
      }
      updateSystem();

      function updateLogs()
      {
        $.ajax({
            type: "GET",
            url: "/api/logs",
            dataType : "json"
          }).done((data)=>{
            $("#logsTable tbody").children().remove();

            data.reverse();
            for(let log of data)
            {
              $("#logsTable tbody").append(`<tr id="log-${log.id}"><th>${log.id}</th><td>${utcTextToLocalText(log.datetime)}</td><td>${log.message}</td></tr>`);
            }
        });
      }
      updateLogs();
  

      // WebSocketによるサーバー側Pushイベントの受信
      let reconnectAttempts = 0;
      const maxReconnectDelay = 30000;

      function connectWebSocket(){
        const url = new URL(window.location.href);
        url.protocol = url.protocol === "https:" ? "wss:" : "ws:";
        url.pathname = "/";
        
        try
        {
          const ws = new WebSocket(url.href);

          ws.onopen = () => {
            console.log(`Connected to server ${url.href}`);
            reconnectAttempts = 0;
          }
          ws.onmessage = (event) => {
            const obj = JSON.parse(event.data);
            if(obj.event === "systemUpdated")
            {
              updateSystem();
            }

            if(obj.event === "logUpdated")
            {
              updateLogs();
            }

          }
          ws.onclose = () => {
            console.log("Disconnected from server");
            scheduleReconnect();
          }
          ws.onerror = (error) => {
            console.error("Error WebSocket:", error);
            ws?.close();
          };
        }
        catch(e)
        {
          console.error("Error WebSocket:", e);
          scheduleReconnect();
        }
      }
      function scheduleReconnect() {
        const delay = Math.min(1000 * (2 ** reconnectAttempts), maxReconnectDelay);
        console.warn(`try reconnect after ${delay / 1000} sec...`);
        setTimeout(connectWebSocket, delay);
        reconnectAttempts++;
      }

      connectWebSocket();

    });
    
  </script>